# .github/workflows/windows-build.yml
# This workflow builds the project on Windows using MSYS2, creates a distributable artifact,
# and uploads it to the workflow run.

name: Build Windows Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ master ] # Adjust if your main branch has a different name

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Defines a single job called "build-windows" that runs on Windows
  build-windows:
    runs-on: windows-latest # Use the latest Windows runner provided by GitHub

    # Sets default shell to MSYS2 MINGW64 for all run steps in this job
    defaults:
      run:
        shell: msys2 {0}

    steps:
    # Step 1: Check out the repository code
    - name: Checkout repository
      uses: actions/checkout@v4
      # If you add git submodules later, uncomment this section:
      # with:
      #   submodules: 'recursive'

    # Step 2: Set up the MSYS2 environment
    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64 # Use the MinGW64 environment (for 64-bit Windows builds)
        update: true # Update MSYS2 base packages first
        install: >- # Install all necessary build dependencies using pacman (multi-line string)
          git
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-python
          mingw-w64-x86_64-pkgconf
          mingw-w64-x86_64-gtk4
          mingw-w64-x86_64-libadwaita
          mingw-w64-x86_64-json-glib
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-desktop-file-utils
          mingw-w64-x86_64-appstream
          zip

    # Step 3: Configure the project using Meson
    - name: Configure build
      run: meson setup build --prefix=/mingw64 --buildtype=release

    # Step 4: Compile the project using Ninja
    - name: Compile project
      # Run ninja inside the build directory
      run: ninja -C build

    # Step 5: Install the project into the MSYS2 prefix
    - name: Install project
      # Run ninja install inside the build directory
      # Let the workflow fail if installation fails
      run: ninja -C build install

    # Step 6: Prepare the artifact directory for distribution
    - name: Prepare artifact directory
      run: |
        # ... (ARTIFACT_NAME, INSTALL_DIR, DEST_DIR, mkdir commands remain the same) ...

        echo "Copying executable..."
        cp "${INSTALL_DIR}/bin/gtk-crusader-village.exe" "${DEST_DIR}/bin/"

        echo "Copying essential DLLs..."
        NEEDED_DLLS=(
          # Core GTK/Adwaita/GLib
          "libgtk-4" "libgdk-4" "libglib-2.0" "libgobject-2.0" "libgio-2.0"
          "libadwaita-1" "libjson-glib-1.0"
          # Rendering & Text
          "libcairo" "libcairo-gobject" "libpango-1.0" "libpangocairo-1.0"
          "libpangoft2-1.0" "libpangowin32-1.0" "libgdk_pixbuf-2.0"
          "libepoxy" "libharfbuzz" "libfreetype" "libfontconfig" "libfribidi"
          "libgraphite2" "libpixman-1"
          # Image Formats (GdkPixbuf loaders)
          "libpng16" "libjpeg" "libtiff"
          # Other Dependencies
          "libintl" "libgcc_s_seh-1" "libstdc++-6" "libwinpthread-1"
          "zlib1" "libffi" "libexpat" "libdatrie" "libthai"
          "libbrotlidec" "libbrotlicommon" "libbz2" "libunistring"
          "libgraphene-1.0" "libgmodule-2.0"
          # Added based on latest runtime errors (Apr 25, 2025):
          "libiconv"      # provides libiconv-2.dll
          "libdeflate"    # provides libdeflate.dll
          "libjbig"       # provides libjbig-0.dll or similar
          "libLerc"       # provides libLerc.dll or similar
        )
        # De-duplicate and sort the list
        UNIQUE_NEEDED_DLLS=($(echo "${NEEDED_DLLS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

        echo "DLLs to copy: ${UNIQUE_NEEDED_DLLS[@]}"

        for lib in "${UNIQUE_NEEDED_DLLS[@]}"; do
          echo "Looking for ${lib}*.dll in ${INSTALL_DIR}/bin/"
          find "${INSTALL_DIR}/bin/" -maxdepth 1 -name "${lib}*.dll" -print -exec cp -t "${DEST_DIR}/bin/" {} + || echo "Info: No DLL found matching ${lib}*.dll"
        done

        echo "Copying data files..."
        # Copy GSettings schema
        cp --verbose "${INSTALL_DIR}/share/glib-2.0/schemas/am.kolunmi.GtkCrusaderVillage.gschema.xml" "${DEST_DIR}/share/glib-2.0/schemas/" 2>/dev/null || echo "Warning: gschema.xml not found."
        # Copy icons
        cp --verbose "${INSTALL_DIR}/share/icons/hicolor/scalable/apps/am.kolunmi.GtkCrusaderVillage.svg" "${DEST_DIR}/share/icons/hicolor/scalable/apps/" 2>/dev/null || echo "Warning: Icon SVG not found."
        cp --verbose "${INSTALL_DIR}/share/icons/hicolor/symbolic/apps/am.kolunmi.GtkCrusaderVillage-symbolic.svg" "${DEST_DIR}/share/icons/hicolor/symbolic/apps/" 2>/dev/null || echo "Warning: Symbolic icon SVG not found."
        # Copy other installed data files
        cp --verbose "${INSTALL_DIR}/share/metainfo/am.kolunmi.GtkCrusaderVillage.metainfo.xml" "${DEST_DIR}/share/metainfo/" 2>/dev/null || echo "Warning: metainfo.xml not found."
        cp --verbose "${INSTALL_DIR}/share/applications/am.kolunmi.GtkCrusaderVillage.desktop" "${DEST_DIR}/share/applications/" 2>/dev/null || echo "Warning: .desktop file not found."
        cp --verbose "${INSTALL_DIR}/share/dbus-1/services/am.kolunmi.GtkCrusaderVillage.service" "${DEST_DIR}/share/dbus-1/services/" 2>/dev/null || echo "Warning: .service file not found."


        echo "Copying locale files..."
        if [ -d "${INSTALL_DIR}/share/locale" ]; then
          for langdir in "${INSTALL_DIR}"/share/locale/*; do
            lang=$(basename "$langdir")
            # Check if it's likely a language code directory (e.g., xx or xx_YY)
            if [[ "$lang" =~ ^[a-z]{2}(_[A-Z]{2})?$ ]]; then
              if [ -f "$langdir/LC_MESSAGES/gtk-crusader-village.mo" ]; then
                mkdir -p "${DEST_DIR}/share/locale/$lang/LC_MESSAGES"
                cp "$langdir/LC_MESSAGES/gtk-crusader-village.mo" "${DEST_DIR}/share/locale/$lang/LC_MESSAGES/"
              fi
            fi
          done
        fi

     # echo "Creating archive..."
     # cd "${DEST_DIR}" # Change into the directory to be zipped
     # zip -r "../${ARTIFACT_NAME}.zip" * # Zip contents recursively

    # Step 7: Upload the packaged zip file as a workflow artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: gtk-crusader-village-windows-x64
        path: artifact 

    # Optional: Create Release and Upload Asset (uncomment and adapt if you use tags for releases)
    # - name: Create Release
    #   if: startsWith(github.ref, 'refs/tags/')
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref_name }}
    #     release_name: Release ${{ github.ref_name }}
    #     draft: false
    #     prerelease: false # Set to true if it's a pre-release
    #
    # - name: Upload Release Asset
    #   if: startsWith(github.ref, 'refs/tags/')
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./gtk-crusader-village-windows-x64.zip
    #     asset_name: gtk-crusader-village-windows-x64.zip
    #     asset_content_type: application/zip
